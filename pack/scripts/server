#!/usr/bin/env python3
import rospy 
from cv_bridge import CvBridge
import imutils  
import cv2 
import sys
from sensor_msgs.msg import Image 
from std_msgs.msg import Float64MultiArray, Float32
from pack.srv import sub_client ,sub_clientResponse
import numpy as np
import functools
import math
from geometry_msgs.msg import Pose

class Arucom:
    def __init__(self):
        rospy.init_node("server")
        self.bridge=CvBridge()
        print('server init')
        self.id_num=0
        rospy.Service("distance",sub_client,self.serverfunc)
        rospy.spin()
    
    def serverfunc(self, msg):
        arucoDict = cv2.aruco.getPredefinedDictionary(cv2.aruco.DICT_4X4_100)
        arucoParams = cv2.aruco.DetectorParameters()
        detector=cv2.aruco.ArucoDetector(arucoDict,arucoParams)
        img1=self.bridge.imgmsg_to_cv2(msg.imgs,"bgr8")
        img1=imutils.resize(img1, width=1000)
        (corners, ids, rejected) = detector.detectMarkers(img1)
        self.corners = corners
        self.ids=ids
        # print("took ids")
        if len(corners)!=0:    
            z=Float64MultiArray()
            y=Float64MultiArray()
            z.layout=list(ids)
            y.data=list(corners)
            # print("z=",z)
            # print(f"y={y}")
            bot_pose=Pose()
            # bot_pose.position.x=
            # y_n=
            # for i, value in  enumerate(corners):
            #    arr1=np.array(corners)
            #    arr=arr1[2:4,0:2]
            #    l=(arr[0,1]-arr[1,1])/(arr[0,0]-arr[1,0])
            for i,id in enumerate(ids):
                if id==50:
                        # arr2=np.array(corners[i])
                        # arr2=np.average(corners[i],0)
                        # x_n= arr2[0,0]
                        # y_n = arr2[0,1]
                        # print("reached here")
                        arr1=np.array(corners[i])
                        # print(arr1)
                        arr3=arr1[:,1:3,0:2]
                        print(arr3)
                        # print("problem")
                        # l=(arr3[0,0,1]-arr3[0,1,1])/(arr3[0,0,0]-arr3[0,1,0])
                        # print(l)
                        # print("detected")
                        arr=np.average(corners[i],0)
                        bot_pose.position.x= arr[0,0]
                        bot_pose.position.y = arr[0,1]
                        self.arr=arr
                        # print("first")
                        # print(f"x_c {bot_pose.position.x} ")
                        # print(bot_pose.position.y)
                        
                        a=math.atan2((arr3[0,0,1]-arr3[0,1,1]),(arr3[0,0,0]-arr3[0,1,0]))

                        print("                                 initial ",a*57.32 )
                        # else:
                            #  a=math.sin(0.5*(np.arctan(l)))   
                        bot_pose.orientation.w=a
                        # print("pose here")
                        # print(bot_pose.orientation.w)
                        # t=np.arcsin(a)
                      
            # self.t=t
            self.bot_pose = bot_pose
            return self.distance()
    def distance(self):
        corners = self.corners
        ids = self.ids
        # b=50
        
        # for i,id in enumerate(ids):
        #     if id==b:
        #             print("detected")
        #             arr=np.average(corners[i],0)
        #             x_n = arr[0,0]
        #             y_n = arr[0,1]
                    # x_sum = functools.reduce(lambda x,y: x+y, x_coords)
                    # y_sum = corners[0][1]+ corners[0][2]+ corners[0][3]+ corners[0][4] 
                    # y_sum = functools.reduce(lambda x,y: x+y, y_coords)
                    # x_n = x_sum*.25
                    # y_n = y_sum*.25
        # x_n = (data.a.position.x)*(0.5)
        # y_n = (data.a.position.y)*(0.5)
        # corners[ids.index(data.id)]
        x=[51,52,53]
        x_n=self.bot_pose.position.x
        y_n=self.bot_pose.position.y
        aruco=Pose()        
        c=sub_clientResponse()
        # for id in ids:
        #     for e in x:
        #         if id==e: 
          
        for i,id in enumerate(ids):
         
           if id==x[self.id_num]:
                
                # print(j,x[j])
                arrn=np.average(corners[i],0)
                aruco.position.x = arrn[0,0]
                aruco.position.y = arrn[0,1]
                x_c=aruco.position.x 
                y_c=aruco.position.y
                c.distance=Float32(math.sqrt((pow((x_c-x_n),2)+pow((y_c-y_n),2))))
                print(c.distance.data)
                print("here")
                if c.distance.data<100:
                  print("hello")
                  self.id_num=self.id_num+1
                  print(self.id_num)
                  
                      
                

        
                      
                                    
                  
                #  if j==3:
                #      print("task accomplished")
                #      break
                #  print(j)
                # if c.distance<100:
                #     j=j+1
                #     if id==54:
                #         break
                   
                # print(f"pose {self.bot_pose.orientation.w}")
                # print("after this")
                # print(x_c)
                # print(y_c)

                    # self.corners = corners
                    # x_sum = corners[0][0]+ corners[1][0]+ corners[2][0]+ corners[3][0]
                    # x_coords = corners[0,:]
                    # y_coords = corners[1,:]
                    # x_sum = functools.reduce(lambda x,y: x+y, x_coords)
                    # # y_sum = corners[0][1]+ corners[0][2]+ corners[0][3]+ corners[0][4] 
                    # y_sum = functools.reduce(lambda x,y: x+y, y_coords)
                    # x_c = x_sum*.25
                    # y_c = y_sum*.25
        # x_c=aruco.position.x 
        # y_c=aruco.position.y
        # c.distance=Float32(math.sqrt((pow((x_c-x_n),2)+pow((y_c-y_n),2))))
        

        # print("fine uptill here")
        # print("distance calculated")
        print(f"distance {c.distance.data}")
        # # print("pose")
        # print(2*(np.arccos(self.bot_pose.orientation.w))*57.32)
        # print("angle")
        # print(57.32*(np.arctan((y_n-y_c)/(x_n-x_c))))
        b=math.atan2((y_c-y_n),(x_c-x_n))
        print("                                                                                             final ", 57.32*b)
        t=(self.bot_pose.orientation.w)
        # if b>0:
        #     r=b
        # else:
        #     r=np.arctan((y_n-y_c)/(x_n-x_c)) 
                    
        c.theta=Float32((-b)+(t))
        print(f"angle {c.theta.data*57.32}")
        # print(data.r) 
        # print(data.theta)
        return c
        
if  __name__=='__main__':
   
    # rospy.init_node("my_node")
    #     # self.bridge=CvBridge()
    #     # rospy.Service("service",text,self.serverfunc)
    # rospy.service("distance",sub_client,self.distance)
    # rospy.spin()
    d=Arucom()     